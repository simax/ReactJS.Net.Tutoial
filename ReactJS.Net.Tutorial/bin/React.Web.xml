<?xml version="1.0"?>
<doc>
    <assembly>
        <name>React.Web</name>
    </assembly>
    <members>
        <member name="T:React.Web.AspNetCache">
            <summary>
            Implementation of <see cref="T:React.ICache"/> using ASP.NET cache.
            </summary>
        </member>
        <member name="F:React.Web.AspNetCache._cache">
            <summary>
            The ASP.NET cache
            </summary>
        </member>
        <member name="M:React.Web.AspNetCache.#ctor(System.Web.HttpContextBase)">
            <summary>
            Initializes a new instance of the <see cref="T:React.Web.AspNetCache"/> class.
            </summary>
            <param name="context">The HTTP context</param>
        </member>
        <member name="M:React.Web.AspNetCache.GetOrInsert``1(System.String,System.TimeSpan,System.Func{``0},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get an item from the cache. If it doesn't exist, call the function to load it
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <param name="key">The cache key.</param>
            <param name="slidingExpiration">
            Sliding expiration, if cache key is not accessed in this time period it will 
            automatically be removed from the cache
            </param>
            <param name="getData">Function to load data to cache. Called if data isn't in the cache, or is stale</param>
            <param name="cacheDependencyFiles">
            Filenames this cached item is dependent on. If any of these files change, the cache
            will be cleared automatically
            </param>
            <param name="cacheDependencyKeys">
            Other cache keys this cached item is dependent on. If any of these keys change, the
            cache will be cleared automatically
            </param>
            <returns>Data</returns>
        </member>
        <member name="T:React.Web.AspNetFileSystem">
            <summary>
            Handles file system functionality, such as reading files. Maps all paths from 
            application-relative (~/...) to full paths using ASP.NET's MapPath method.
            </summary>
        </member>
        <member name="F:React.Web.AspNetFileSystem._serverUtility">
            <summary>
            The ASP.NET server utilities
            </summary>
        </member>
        <member name="M:React.Web.AspNetFileSystem.#ctor(System.Web.HttpServerUtilityBase)">
            <summary>
            Initializes a new instance of the <see cref="T:React.Web.AspNetFileSystem"/> class.
            </summary>
            <param name="serverUtility">The server utility.</param>
        </member>
        <member name="M:React.Web.AspNetFileSystem.MapPath(System.String)">
            <summary>
            Converts a path from an application relative path (~/...) to a full filesystem path
            </summary>
            <param name="relativePath">App-relative path of the file</param>
            <returns>Full path of the file</returns>
        </member>
        <member name="T:React.Web.AssemblyRegistration">
            <summary>
            Handles registration of ReactJS.NET components that are only applicable
            in the context of an ASP.NET web application.
            </summary>
        </member>
        <member name="M:React.Web.AssemblyRegistration.Register(React.TinyIoC.TinyIoCContainer)">
            <summary>
            Registers components in the React IoC container
            </summary>
            <param name="container">Container to register components in</param>
        </member>
        <member name="M:React.Web.AssemblyRegistration.IsInAspNet">
            <summary>
            Determines if the current application is running in the context of an ASP.NET
            Web Application
            </summary>
            <returns><c>true</c> if in an ASP.NET web app; <c>false</c> otherwise</returns>
        </member>
        <member name="T:React.Web.IJsxHandler">
            <summary>
            ASP.NET handler that transforms JSX into JavaScript.
            </summary>
        </member>
        <member name="M:React.Web.IJsxHandler.Execute">
            <summary>
            Executes the handler. Outputs JavaScript to the response.
            </summary>
        </member>
        <member name="T:React.Web.TinyIoC.HttpContextLifetimeProvider">
            <summary>
            Scopes IoC registrations to the context of an ASP.NET web request. All instantiated
            components will be automatically disposed at the end of the request.
            </summary>
        </member>
        <member name="F:React.Web.TinyIoC.HttpContextLifetimeProvider.PREFIX">
            <summary>
            Prefix to use on HttpContext items
            </summary>
        </member>
        <member name="F:React.Web.TinyIoC.HttpContextLifetimeProvider._keyName">
            <summary>
            Name of the key for this particular registration
            </summary>
        </member>
        <member name="M:React.Web.TinyIoC.HttpContextLifetimeProvider.GetObject">
            <summary>
            Gets the stored object if it exists, or null if not
            </summary>
            <returns>Object instance or null</returns>
        </member>
        <member name="M:React.Web.TinyIoC.HttpContextLifetimeProvider.SetObject(System.Object)">
            <summary>
            Store the object
            </summary>
            <param name="value">Object to store</param>
        </member>
        <member name="M:React.Web.TinyIoC.HttpContextLifetimeProvider.ReleaseObject">
            <summary>
            Release the object
            </summary>
        </member>
        <member name="M:React.Web.TinyIoC.HttpContextLifetimeProvider.DisposeAll">
            <summary>
            Disposes all instantiated components
            </summary>
        </member>
        <member name="T:React.Web.WebInitializer">
            <summary>
            Handles initialisation of ReactJS.NET. This is only called once, at application start.
            </summary>
        </member>
        <member name="M:React.Web.WebInitializer.Initialize">
            <summary>
            Intialise ReactJS.NET
            </summary>
        </member>
        <member name="M:React.Web.WebInitializer.AsPerRequestSingleton(React.TinyIoC.TinyIoCContainer.RegisterOptions)">
            <summary>
            Registers a class such that every ASP.NET web request has a single instance of it.
            Instances will be stored in HttpContext.
            </summary>
            <param name="registerOptions">Registration options</param>
            <returns>Registration options (for chaining)</returns>
        </member>
        <member name="T:React.Web.WebInitializer.IocPerRequestDisposal">
            <summary>
            Handles disposing per-request IoC instances at the end of the request
            </summary>
        </member>
        <member name="T:React.Web.JsxHandler">
            <summary>
            ASP.NET handler that transforms JSX into JavaScript.
            </summary>
        </member>
        <member name="M:React.Web.JsxHandler.#ctor(React.IReactEnvironment,React.IFileSystem,System.Web.HttpRequestBase,System.Web.HttpResponseBase)">
            <summary>
            Initializes a new instance of the <see cref="T:React.Web.JsxHandler"/> class.
            </summary>
            <param name="environment">The environment.</param>
            <param name="fileSystem">File system</param>
            <param name="request">HTTP request</param>
            <param name="response">HTTP response</param>
        </member>
        <member name="M:React.Web.JsxHandler.Execute">
            <summary>
            Executes the handler. Outputs JavaScript to the response.
            </summary>
        </member>
        <member name="T:React.Web.JsxHandlerFactory">
            <summary>
            Handles creation and execution of <see cref="T:React.Web.IJsxHandler"/> instances.
            </summary>
        </member>
        <member name="M:React.Web.JsxHandlerFactory.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes this request
            </summary>
            <param name="context">The request context</param>
        </member>
        <member name="P:React.Web.JsxHandlerFactory.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.
            </summary>
            <returns>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</returns>
        </member>
    </members>
</doc>
